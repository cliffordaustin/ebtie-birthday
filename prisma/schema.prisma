// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider  = "postgresql"
  // url      = env("DATABASE_URL")
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum PaymentPlan {
  MOJA_PLAN
  PACHA_PLAN
  TATU_PLAN
}

enum PaymentMethods {
  CARD
  BANK
  REVOLUT_TRANSFERWISE
}

model User {
  id                    String              @id @default(cuid())
  email                 String              @unique
  name                  String              @db.VarChar(255)
  dietryRestrictions    DietryRestriction[]
  arrivalDate           DateTime?
  arrivalFlightInfo     String?
  departureDate         DateTime?
  departureFlightInfo   String?
  flightFirstName       String?
  flightLastName        String?
  flightMiddleName      String?
  flightDateOfBirth     DateTime?
  flightNationality     String?
  flightPassportNumber  String?
  otherPassportInfo     OtherPassportInfo[]
  paymentPlan           PaymentPlan?
  paymentMethod         PaymentMethods?
  doubleRoomDescription String?
  phone                 String?
  profilePicture        String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  tripAddOns            TripAddOn[]
  onSiteTripAddOns      TripAddOn[]         @relation("UserOnSiteTripAddOns")
  others                String?
  package               Package?            @relation(fields: [packageId], references: [id])
  packageId             String?
  userPackages          Package[]           @relation("UserPackages")
  newUserPackages       UserPackage[]
  CardPaymentLink       CardPaymentLink[]
  yellow_fever_vaccine  Boolean             @default(false)
  visa_received         Boolean             @default(false)
  emergencyContact      EmergencyContact[]
}

model EmergencyContact {
  id           String  @id @default(cuid())
  name         String?
  phone        String?
  email        String?
  relationship String?
  user         User    @relation(fields: [userId], references: [id])
  userId       String
}

model OtherPassportInfo {
  id                   String    @id @default(cuid())
  flightFirstName      String?
  flightLastName       String?
  flightMiddleName     String?
  flightDateOfBirth    DateTime?
  flightNationality    String?
  flightPassportNumber String?
  User                 User?     @relation(fields: [userId], references: [id])
  userId               String?
}

model DietryRestriction {
  id     String @id @default(cuid())
  name   String @db.VarChar(255)
  users  User   @relation(references: [id], fields: [userId])
  userId String
}

model CardPaymentLink {
  id        String   @id @default(cuid())
  link      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model TripAddOn {
  id                     String  @id @default(cuid())
  name                   String  @db.VarChar(255)
  price                  Float?
  link                   String?
  users                  User[]
  userOnSiteTripAddOns   User[]  @relation("UserOnSiteTripAddOns")
  advanceBookingRequired Boolean @default(false)
}

model Package {
  id               String        @id @default(cuid())
  name             String        @db.VarChar(255)
  description      String?
  imageUrl         String?
  imageUrls        String[]
  price            Float
  availableVolume  Int           @default(0)
  properties       Property[]
  User             User[]
  userPackages     User[]        @relation("UserPackages")
  selectedPackages Int           @default(1)
  UserPackage      UserPackage[]
}

model UserPackage {
  id             String  @id @default(cuid())
  userId         String
  packageId      String
  selectedNumber Int     @default(1)
  user           User    @relation(fields: [userId], references: [id])
  package        Package @relation(fields: [packageId], references: [id])

  @@unique([userId, packageId])
}

model Property {
  id        String  @id @default(cuid())
  name      String  @db.VarChar(255)
  room      String  @db.VarChar(255)
  capacity  Int?    @default(0)
  Package   Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId String
}
